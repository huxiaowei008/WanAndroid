apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'//用于编译Android代码

apply plugin: 'kotlin-android-extensions'//用于扩展绑定关系,通俗讲就是直接使用xml中的id

apply plugin: 'kotlin-kapt'//那些注释处理需要用这个,就是annotationProcessor替换成kapt

apply plugin: 'android-aspectjx'
android {
    compileSdkVersion config.target_sdk
    defaultConfig {
        applicationId "com.hxw.wanandroid"
        minSdkVersion 21
        targetSdkVersion config.target_sdk
        versionCode config.version_code
        versionName config.version_name
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
//        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true //删除没有用到的资源
            zipAlignEnabled true //混淆后的zip优化
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

        }

        debug {
            minifyEnabled false
            shrinkResources false //删除没有用到的资源
            zipAlignEnabled false //混淆后的zip优化
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

        }
    }

    //统一打包输出名称
    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "V${defaultConfig.versionName}_${releaseTime()}_wan_hxw.apk"
        }
    }

    //用这配置统一support依赖的版本,这里除外multidex包,现在换成AndroidX了,暂时用不到
//    configurations.all {
//        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
//            def requested = details.requested
//            if (requested.group == 'com.android.support') {
//                if (!requested.name.startsWith("multidex")) {
//                    details.useVersion '28.0.0' //这里改为你项目使用的版本即可
//                }
//            }
//        }
//    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/atomicfu.kotlin_module'
//        exclude 'META-INF/xxx'
    }
}

static def releaseTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC"))
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
//    implementation 'androidx.multidex:multidex:2.0.1'
    implementation project(':core')
//    kapt project(':compiler')

    //lottie-android https://github.com/airbnb/lottie-android
    implementation('com.airbnb.android:lottie:3.0.7') {
        transitive = false
    }

    //Navigation https://developer.android.google.cn/topic/libraries/architecture/navigation/navigation-implementing
    implementation 'android.arch.navigation:navigation-fragment-ktx:1.0.0'
    implementation 'android.arch.navigation:navigation-ui-ktx:1.0.0'
    //Paging https://developer.android.google.cn/topic/libraries/architecture/paging/
    implementation 'androidx.paging:paging-runtime-ktx:2.1.0'
    //AgentWeb https://github.com/Justson/AgentWeb
    implementation 'com.just.agentweb:agentweb:4.0.2'
    implementation 'com.jakewharton.rxrelay2:rxrelay:2.1.1'
    implementation 'com.github.bumptech.glide:glide:4.9.0'
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
